/*
 * Copyright 2019 junichi11.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.junichi11.netbeans.php.enhancements.options;

import com.junichi11.netbeans.php.enhancements.editor.completion.Parameters;

final class PHPEnhancementsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = -4525362573123684731L;

    private final PHPEnhancementsOptionsPanelController controller;

    PHPEnhancementsPanel(PHPEnhancementsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typingHooksLabel = new javax.swing.JLabel();
        objectOperatorCheckBox = new javax.swing.JCheckBox();
        doubleArrowOperatorCheckBox = new javax.swing.JCheckBox();
        codeCompletionLabel = new javax.swing.JLabel();
        toUppercaseConstCheckBox = new javax.swing.JCheckBox();
        toUppercaseDefineCheckBox = new javax.swing.JCheckBox();
        parametersCodeCompletionCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(typingHooksLabel, org.openide.util.NbBundle.getMessage(PHPEnhancementsPanel.class, "PHPEnhancementsPanel.typingHooksLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(objectOperatorCheckBox, org.openide.util.NbBundle.getMessage(PHPEnhancementsPanel.class, "PHPEnhancementsPanel.objectOperatorCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(doubleArrowOperatorCheckBox, org.openide.util.NbBundle.getMessage(PHPEnhancementsPanel.class, "PHPEnhancementsPanel.doubleArrowOperatorCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(codeCompletionLabel, org.openide.util.NbBundle.getMessage(PHPEnhancementsPanel.class, "PHPEnhancementsPanel.codeCompletionLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(toUppercaseConstCheckBox, org.openide.util.NbBundle.getMessage(PHPEnhancementsPanel.class, "PHPEnhancementsPanel.toUppercaseConstCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(toUppercaseDefineCheckBox, org.openide.util.NbBundle.getMessage(PHPEnhancementsPanel.class, "PHPEnhancementsPanel.toUppercaseDefineCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(parametersCodeCompletionCheckBox, org.openide.util.NbBundle.getMessage(PHPEnhancementsPanel.class, "PHPEnhancementsPanel.parametersCodeCompletionCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typingHooksLabel)
                    .addComponent(codeCompletionLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(doubleArrowOperatorCheckBox)
                            .addComponent(objectOperatorCheckBox)
                            .addComponent(toUppercaseConstCheckBox)
                            .addComponent(toUppercaseDefineCheckBox)
                            .addComponent(parametersCodeCompletionCheckBox))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typingHooksLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(objectOperatorCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doubleArrowOperatorCheckBox)
                .addGap(18, 18, 18)
                .addComponent(codeCompletionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toUppercaseConstCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toUppercaseDefineCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parametersCodeCompletionCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        PHPEnhancementsOptions options = PHPEnhancementsOptions.getInstance();
        objectOperatorCheckBox.setSelected(options.isObjectOperator());
        doubleArrowOperatorCheckBox.setSelected(options.isDoubleArrowOperator());
        toUppercaseConstCheckBox.setSelected(options.isToUppercaseConst());
        toUppercaseDefineCheckBox.setSelected(options.isToUppercaseDefine());
        parametersCodeCompletionCheckBox.setSelected(options.isParametersCodeCompletion());
    }

    void store() {
        PHPEnhancementsOptions options = PHPEnhancementsOptions.getInstance();
        options.setObjectOperator(objectOperatorCheckBox.isSelected());
        options.setDoubleArrowOperator(doubleArrowOperatorCheckBox.isSelected());
        options.setToUppercaseConst(toUppercaseConstCheckBox.isSelected());
        options.setToUppercaseDefine(toUppercaseDefineCheckBox.isSelected());
        options.setParametersCodeCompletion(parametersCodeCompletionCheckBox.isSelected());
        if (parametersCodeCompletionCheckBox.isSelected()) {
            Parameters.reload();
        } else {
            Parameters.clear();
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel codeCompletionLabel;
    private javax.swing.JCheckBox doubleArrowOperatorCheckBox;
    private javax.swing.JCheckBox objectOperatorCheckBox;
    private javax.swing.JCheckBox parametersCodeCompletionCheckBox;
    private javax.swing.JCheckBox toUppercaseConstCheckBox;
    private javax.swing.JCheckBox toUppercaseDefineCheckBox;
    private javax.swing.JLabel typingHooksLabel;
    // End of variables declaration//GEN-END:variables
}
